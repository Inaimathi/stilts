--- allArtistsNamesort: unit -> (string) list

SELECT namesort 
FROM contributors
WHERE EXISTS ( SELECT * FROM contributor_album WHERE contributor = id AND role IN ('1', '5', '6') )
ORDER BY namesort 

--- allArtistsRange: int * int -> { id: int, name: string } list

SELECT id, name
FROM contributors
WHERE EXISTS ( SELECT * FROM contributor_album WHERE contributor = id AND role IN ('1', '5', '6') )
ORDER BY namesort 
LIMIT ? OFFSET ?

--- albumsByArtist: int -> { id: int, name: string } list

SELECT DISTINCT id, title
FROM albums
LEFT JOIN contributor_album ca ON ( ca.album = albums.id )
WHERE ca.contributor = ?
ORDER BY titlesort, disc

--- allAlbumsNamesort: unit -> (string) list

SELECT titlesort
FROM albums
ORDER BY titlesort, disc

--- allAlbumsRange: int * int -> { id: int, name: string } list

SELECT id, title
FROM albums
ORDER BY titlesort, disc
LIMIT ? OFFSET ?

--- albumTracks: int -> { id: int, tracknum: int option, title: string } list

SELECT id, tracknum, title
FROM tracks
WHERE audio = 1 AND album = ?
ORDER BY disc, tracknum, titlesort

--- artistDetail: int -> { name: string }

SELECT name
FROM contributors
WHERE id = ?

--- albumDetail: int -> { title: string option, year: int option, artist: string option }

SELECT albums.title, albums.year, contributors.name
FROM albums
LEFT JOIN contributors ON (contributors.id = albums.contributor)
WHERE albums.id = ? 

--- songInfo: int -> { title: string option, year: int option, albumId: int option, albumTitle: string option }

SELECT tracks.title, tracks.year, tracks.album, albums.title
FROM tracks
LEFT JOIN albums ON ( albums.id = tracks.album )
WHERE tracks.id = ?

